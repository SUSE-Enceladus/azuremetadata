#!/usr/bin/perl

#Copyright (C) 2015 SUSE LLC
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;

use XML::LibXML;
use Getopt::Long;
use JSON;

use AzureNetwork;
use AzureDisk;

sub main {
    my %options = parse_options();
    my %data;
    if ($options{tag}) {
        # VHD disk tag discovery
        $data{billingTag} = AzureDisk::getVHDDiskTag($options{device});
    } elsif ($options{external_ip}) {
        # Public External IP discovery
        my $ip = AzureNetwork::read_external_ip(
            AzureNetwork::import_config()
        );
        $data{external_ip} = $ip;
    } elsif ($options{internal_ip}) {
        # Private Internal IP discovery
        my $ip = AzureNetwork::read_internal_ip(
            AzureNetwork::import_config()
        );
        $data{internal_ip} = $ip;
    }
    print writeMetaData(\%data, $options{xmlOut})
}

sub parse_options {
    my %options;
    my $external_ip;
    my $internal_ip;
    my $tag;
    my $device;
    my $xmlOut;
    my $result = GetOptions(
        "external-ip|e" => \$external_ip,
        "internal-ip|i" => \$internal_ip,
        "tag|t"         => \$tag,
        "device|d=s"    => \$device,
        "xml|x"         => \$xmlOut
    );
    $options{external_ip} = $external_ip;
    $options{internal_ip} = $internal_ip;
    $options{tag} = $tag;
    $options{device} = $device;
    $options{xmlOut} = $xmlOut;
    if ( $result != 1 ) {
        usage();
        die "invalid options";
    }
    if ((! $options{tag}) &&
        (! $options{external_ip}) &&
        (! $options{internal_ip})
    ) {
        usage();
        die "no command given";
    }
    if (! $options{device}) {
        $options{device} = '/dev/sda';
    }
    return %options;
}

sub usage {
    print "Usage:\n";
    print "  azuremetadata \n";
    print "    --external-ip\n";
    print "      print public external IPv4 address\n";
    print "\n";
    print "    --internal-ip\n";
    print "      print private internal IPv4 address\n";
    print "\n";
    print "    --tag\n";
    print "      print vhd disk tag stored in boot record\n";
    print "\n";
    print "  options\n";
    print "    [ --device | -d <image file or disk device> ]\n";
    print "      Specify device for tag discovery. Default device\n";
    print "      is set to '/dev/sda'\n";
    print "    [ --xml | -x ]\n";
    print "      Wrap information in XML markup\n";
    print "--\n";
}

sub writeMetaData {
    my $json_data = shift;
    my $xmlFormat = shift;
    my $json_ref = JSON->new->allow_nonref;
    $json_ref -> pretty;
    my $json_text = $json_ref ->encode( $json_data );
    chomp $json_text;
    if ($xmlFormat) {
        return "<document>".$json_text."</document>";
    } else {
        return $json_text;
    }
}

main();
